```{r}
library(Seurat)
library(SingleCellExperiment)
library(tradeSeq)
library(dplyr)
suppressPackageStartupMessages({
  library(slingshot)
})
library(future)
library(RColorBrewer)
library(dittoSeq)
library(patchwork)
```

## Load data

```{r}
#load object
retina.integrated.ASL1 <- readRDS("../data/retina.integrated_annotated.ASL1.correct.rds")
```

```{r}

DimPlot(retina.integrated.ASL1, reduction = "umap", group.by = "cell_type")
```

```{r}
FeaturePlot(retina.integrated.ASL1, 
            reduction = "umap", 
            features = c("ASL1"),
            split.by = "cell_type",
            order = TRUE,
            label = TRUE)

```

```{r}
#Checking epithelial genes
FeaturePlot(retina.integrated.ASL1, 
            reduction = "umap", 
            features = c("TGFB2", "TRPM1", "SLC7A2", "BNC2"),
            min.cutoff = "q10",
            order = TRUE,
            label = TRUE)
```

```{r}
#checking intermediate genes
FeaturePlot(retina.integrated.ASL1, 
            reduction = "umap", 
            features = c("RELN", "MXRA5", "KIF13A", "MAST4"),
            min.cutoff = "q10",
            order = TRUE,
            label = TRUE)
```

```{r}
# checking fiber genes
FeaturePlot(retina.integrated.ASL1, 
            reduction = "umap", 
            features = c("CRYBA4", "WNT5B", "JARID2", "ST6GALNAC3"),
            min.cutoff = "q10",
            order = TRUE,
            label = TRUE)
#            features = c("CRYBA4", "WNT5B", "JARID2", "ST6GALNAC3"),
```

```{r}
#MAF
FeaturePlot(retina.integrated.ASL1, 
            reduction = "umap", 
            features = c("EED"),
            split.by = "condition",
            min.cutoff = "q10",
            order = TRUE,
            label = TRUE)
```

```{r}
#Slingshot
pal <- c(RColorBrewer::brewer.pal(9, "Set1"), RColorBrewer::brewer.pal(8, "Set2"))

# Save the objects as separate matrices for input in slingshot
dimred <- retina.integrated.ASL1@reductions$umap@cell.embeddings
clustering <- retina.integrated.ASL1$cell_type

counts <- as.matrix(retina.integrated.ASL1@assays$SCT@data[retina.integrated.ASL1@assays$integrated@var.features, ])

#Run default Slingshot
set.seed(1)
lineages <- getLineages(data = dimred,
                        clusterLabels = clustering,
                        #define how many branches/lineages to consider
                        start.clus = "epithelial",
                        end.clus = "fiber") #define where to start the trajectories

lineages
```

```{r}
# Plot the lineages
par(mfrow=c(1,2))
plot(dimred[,1:2], col = pal[clustering],  cex=.5,pch = 16)
for(i in levels(clustering)){ 
  text( mean(dimred[clustering==i,1]),
        mean(dimred[clustering==i,2]), labels = i,font = 2) }
plot(dimred, col = pal[clustering],  pch = 16)
lines(SlingshotDataSet(lineages), lwd = 3,  type = 'lineages', col = 'black')
```

```{r}
curves <- getCurves(SlingshotDataSet(lineages), approx_points = 300, thresh = 0.01, stretch = 0.8, allow.breaks = FALSE, shrink = 0.99)
curves
```

```{r}
plot(dimred, col = pal[clustering], asp = 1, pch = 16)
lines(SlingshotDataSet(curves), lwd = 3, col = "black")
```

```{r}
# identifying temporally expressed genes
dim(counts)
filt_counts <- counts[rowSums(counts > 5) > ncol(counts)/100, ]
dim(filt_counts)


set.seed(1)
icMat <- evaluateK(counts = counts, sds = curves, k = 3:10, 
                   nGenes = 1000, verbose = T, plot = T)
```

```{r}
#setting parallel options
BPPARAM <- BiocParallel::bpparam()
set.seed(1)
pseudotime <- slingPseudotime(curves, na = FALSE)
cellWeights <- slingCurveWeights(curves)

BPPARAM$workers <- 16
sce <- fitGAM(counts = counts, pseudotime = pseudotime, cellWeights = cellWeights,
                 nknots = 10, verbose = FALSE, parallel=TRUE, BPPARAM = BPPARAM)
BPPARAM$workers <- 1
```

```{r}
#Genes that change with pseudotime
assoRes <- associationTest(sce)
head(assoRes)
```

```{r}
# topgenes <- rownames(assoRes[order(assoRes$pvalue), ])[1:100]
# pst.ord <- order(sce@colData$slingPseudotime_1 , na.last = NA)
# heatdata <- assays(sce)$counts[topgenes, pst.ord]
# heatclus <- sce@
# 
# heatmap(log1p(heatdata), Colv = NA,
#         ColSideColors = heatclus)
# 
# 
# dittoHeatmap(object = sce, genes = getGenes(sce)[1:100],
#              annot.by = c("slingPseudotime_1", "slingPseudotime_2", "slingPseudotime_3"))
```

```{r}
#Discovering progenitor marker genes
startRes <- startVsEndTest(sce)

#We can visualize estimated smoothers for the second most significant gene.
oStart <- order(startRes$waldStat, decreasing = T)
sigGeneStart <- names(sce)[oStart[1]]
head(rownames(startRes))
```

```{r}
p1_1 <- plotSmoothers(sce, counts, gene = names(sce)[oStart[1]])
p1_2 <- plotSmoothers(sce, counts, gene = names(sce)[oStart[2]])
p1_3 <- plotSmoothers(sce, counts, gene = names(sce)[oStart[3]])
p1_4 <- plotSmoothers(sce, counts, gene = names(sce)[oStart[4]])
p1_5 <- plotSmoothers(sce, counts, gene = names(sce)[oStart[5]])

p2_1 <- plotGeneCount(curves, counts, gene = names(sce)[oStart[1]])
p2_2 <- plotGeneCount(curves, counts, gene = names(sce)[oStart[2]])
p2_3 <- plotGeneCount(curves, counts, gene = names(sce)[oStart[3]])
p2_4 <- plotGeneCount(curves, counts, gene = names(sce)[oStart[4]])
p2_5 <- plotGeneCount(curves, counts, gene = names(sce)[oStart[5]])

(p1_1 | p1_2 | p1_3 | p1_4 | p1_5) / (p2_1 | p2_2 | p2_3 | p2_4 | p2_5)

p1_1 + p2_1

p1_2 + p2_2

p1_3 + p2_3

p1_4 + p2_4

p1_5 + p2_5
```

## TEST

```{r}
plotSmoothers(sce, counts, gene = names(sce)[oStart[6]]) + plotGeneCount(curves, counts, gene = names(sce)[oStart[6]])
```


```{r}
customRes <- startVsEndTest(sce, pseudotimeValues = c(10, 15))
oCustom <- order(customRes$waldStat, decreasing = TRUE)
sigGeneCustom <- names(sce)[oCustom[1]]
plotSmoothers(sce, counts, gene = "EED")
plotGeneCount(curves, counts, gene = "E")

```
```{r}
plotGeneCount(curve = curves, counts = counts,
              clusters = clustering,
              models = sce)
```

