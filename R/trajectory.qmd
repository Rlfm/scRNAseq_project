```{r}
library(Seurat)
library(SingleCellExperiment)
library(tradeSeq)
library(dplyr)
suppressPackageStartupMessages({
  library(slingshot)
})
library(future)
```

```{r}
#load object
seurat_object <- readRDS("../data/retina.preprocessed.rds")
seurat_ASL1 <- readRDS("../data/retina.preprocessed_ASL1.rds")

seurat_ASL1@meta.data <- seurat_ASL1@meta.data |> 
  mutate(
    embryo = str_sub(sample, 1, 2),
    timepoint = case_when(
      grepl("RPE", sample) ~ "0h",
      grepl("6h", sample) ~ "6h",
      grepl("24h", sample) ~ "24h"
    ),
    condition = if_else(grepl("FGF", sample), "sti", "ctl")
  )

```

```{r}
DimPlot(seurat_ASL1, reduction = "umap", split.by = "condition")
```


```{r}
#seurat_object_filtered_2 <- readRDS("../data/retina_preprocessed.rds")

#seurat_ASL1 <- subset(seurat_object_filtered_2, idents = "6")

DimPlot(seurat_ASL1, reduction = "umap")

FeaturePlot(seurat_ASL1, 
            reduction = "umap", 
            features = c("ASL1"),
            order = TRUE,
            label = TRUE)

```


```{r}
seurat_ASL1 <- subset(seurat_ASL1, sample %in% c("E46h"))

#Run PCA
seurat_ASL1 <- FindVariableFeatures(seurat_ASL1, selection.method = "vst", nfeatures = 2000)

#seurat_ASL1 <- ScaleData(seurat_ASL1, features = VariableFeatures(object = seurat_ASL1))
seurat_ASL1 <- RunPCA(seurat_ASL1, features = VariableFeatures(object = seurat_ASL1))
ElbowPlot(seurat_ASL1) 

```


```{r}
#clustering
seurat_ASL1 <- FindNeighbors(seurat_ASL1, dims = 1:10)
seurat_ASL1 <- FindClusters(seurat_ASL1, resolution = c(0.2))


Idents(seurat_ASL1) <- "SCT_snn_res.0.2"

#Non linear dimentional reduction
seurat_ASL1 <- RunUMAP(seurat_ASL1, dims = 1:10)
DimPlot(seurat_ASL1, reduction = "umap", split = "sample")
```


```{r}
# #splitting between conditions
seurat_ASL1_split <- SplitObject(seurat_ASL1, split.by = "condition")

# normalize and identify variable features for each dataset independently
seurat_ASL1_split <- lapply(X = seurat_ASL1_split, FUN = function(x) {
  x <- NormalizeData(x)
  x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 2000)
})

# select features that are repeatedly variable across datasets for integration run PCA on each dataset using these features
features <- SelectIntegrationFeatures(object.list = seurat_ASL1_split)
```


```{r}
# # integration
plan("multisession", workers = 4)
options(future.globals.maxSize = 8000 * 1024^2)

#Identify anchors
seurat_ASL1_anchors <- FindIntegrationAnchors(object.list = seurat_ASL1_split, anchor.features = features)

#create an integrated data assay
seurat_ASL1_combined <- IntegrateData(anchorset = seurat_ASL1_anchors)

DefaultAssay(seurat_ASL1_combined) <- "integrated"

plan("sequential")
```

```{r}
# # Run the standard workflow for visualization and clustering
seurat_ASL1_combined <- ScaleData(seurat_ASL1_combined, verbose = FALSE)
seurat_ASL1_combined <- RunPCA(seurat_ASL1_combined, npcs = 30, verbose = FALSE)
seurat_ASL1_combined <- RunUMAP(seurat_ASL1_combined, reduction = "pca", dims = 1:15)
seurat_ASL1_combined <- FindNeighbors(seurat_ASL1_combined, reduction = "pca", dims = 1:15)
seurat_ASL1_combined <- FindClusters(seurat_ASL1_combined, resolution = 0.1)
seurat_ASL1_combined <- FindClusters(seurat_ASL1_combined, resolution = 0.2)
seurat_ASL1_combined <- FindClusters(seurat_ASL1_combined, resolution = 0.3)
seurat_ASL1_combined <- FindClusters(seurat_ASL1_combined, resolution = 0.4)
seurat_ASL1_combined <- FindClusters(seurat_ASL1_combined, resolution = 0.4)
```

```{r}
Idents(seurat_ASL1_combined) <- "integrated_snn_res.0.1"
DimPlot(seurat_ASL1_combined, reduction = "umap")

```


```{r}
#checking clusters
FeaturePlot(seurat_ASL1_combined, 
            reduction = "umap", 
            features = c("ASL1"),
            order = TRUE,
            label = TRUE)
```


```{r}
#checking clusters
FeaturePlot(seurat_ASL1_combined, 
            reduction = "umap", 
            features = c("TGFB2", "TRPM1", "SLC7A2", "BNC2"), 
            order = TRUE,
            label = TRUE)
```

```{r}
FeaturePlot(seurat_ASL1_combined, 
            reduction = "umap", 
            features = c("RELN", "MXRA5", "KIF13A", "MAST4"),
            order = TRUE,
            label = TRUE)

#features = c("RELN", "MXRA5", "KIF13A", "MAST4"),
```


```{r}
FeaturePlot(seurat_ASL1_combined, 
            reduction = "umap", 
            features = c("CRYBA4", "WNT5B", "JARID2", "ST6GALNAC3"),
            order = TRUE,
            label = TRUE)
#            features = c("CRYBA4", "WNT5B", "JARID2", "ST6GALNAC3"),
```
```{r}
FeaturePlot(seurat_ASL1_combined, 
            reduction = "umap", 
            features = c("MAF"),
            order = TRUE,
            label = TRUE)
```



```{r}
#Slingshot
pal <- c(RColorBrewer::brewer.pal(9, "Set1"), RColorBrewer::brewer.pal(8, "Set2"))

# Save the objects as separate matrices for input in slingshot
dimred <- seurat_ASL1@reductions$umap@cell.embeddings
clustering <- seurat_ASL1$SCT_snn_res.0.2
counts <- as.matrix(seurat_ASL1@assays$SCT@counts[seurat_ASL1@assays$SCT@var.features, ])

#Run default Slingshot
set.seed(1)
lineages <- getLineages(data = dimred,
                        clusterLabels = clustering,
                        #end.clus = c("1","4","2"), #define how many branches/lineages to consider
                        start.clus = "0") #define where to start the trajectories

lineages
```

```{r}
# Plot the lineages
par(mfrow=c(1,2))
plot(dimred[,1:2], col = pal[clustering],  cex=.5,pch = 16)
for(i in levels(clustering)){ 
  text( mean(dimred[clustering==i,1]),
        mean(dimred[clustering==i,2]), labels = i,font = 2) }
plot(dimred, col = pal[clustering],  pch = 16)
lines(SlingshotDataSet(lineages), lwd = 3,  type = 'lineages', col = 'black')
```


```{r}
curves <- getCurves(SlingshotDataSet(lineages), approx_points = 300, thresh = 0.01, stretch = 0.8, allow.breaks = FALSE, shrink = 0.99)
curves
```


```{r}
plot(dimred, col = pal[clustering], asp = 1, pch = 16)
lines(SlingshotDataSet(curves), lwd = 3, col = "black")
```


```{r}
# identifying temporally expressed genes
dim(counts)


set.seed(1)
icMat <- evaluateK(counts = counts, sds = curves, k = 3:10, 
                   nGenes = 200, verbose = T, plot = T)
```


```{r}
set.seed(1)
pseudotime <- slingPseudotime(curves, na = FALSE)
cellWeights <- slingCurveWeights(curves)

plan("multisession", workers = 4)
options(future.globals.maxSize = 8000 * 1024^2)
sce <- fitGAM(counts = counts, pseudotime = pseudotime, cellWeights = cellWeights,
                 nknots = 6, verbose = FALSE)
plan("sequential")
#Genes that change with pseudotime
assoRes <- associationTest(sce)
head(assoRes)
```


```{r}
#Discovering progenitor marker genes
startRes <- startVsEndTest(sce)

#We can visualize estimated smoothers for the second most significant gene.
oStart <- order(startRes$waldStat, decreasing = TRUE)
sigGeneStart <- names(sce)[oStart[3]]
#Which gene?
sigGeneStart
```

```{r}
plotSmoothers(sce, counts, gene = sigGeneStart)
plotGeneCount(curves, counts, gene = "TRPM1")
```

