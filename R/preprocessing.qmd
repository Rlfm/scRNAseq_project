---
title: "Preprocessing"
format: html
editor: visual
---

# Load Dependencies

```{r}
library(Seurat)
library(scDblFinder)
library(clustree)
library(dplyr)
library(tidyr)
library(tibble)
library(ggplot2)

# visualization config
options(bitmapType="cairo")

set.seed(1)
```

# Directories 
```{r}
working_dir <- getwd()

raw_data_dir <- working_dir |>
  substr(1, nchar(working_dir)-2) |>
  paste("_raw", sep = "/")

data_dir <- working_dir |>
  substr(1, nchar(working_dir)-2) |>
  paste("data", sep = "/")

```
```{r}
retina.scrna <- readRDS("../data/retina.rds")
```

# Adding Percentage of Overrepresented Genes

```{r}
# mitochondrial
retina.scrna[["percent.mt"]] <- PercentageFeatureSet(
  retina.scrna, pattern = "^MT")
retina.scrna[["percent.hb"]] <- PercentageFeatureSet(
  retina.scrna, pattern = "^HB")
# ribosomal proteins
retina.scrna[["percent.rb"]] <- PercentageFeatureSet(
  retina.scrna, pattern = "^RP[SL]")

p1 <- VlnPlot(
  retina.scrna,
  features = c("nFeature_RNA", "nCount_RNA", "percent.mt", "percent.hb",
               "percent.rb"),
  ncol = 5
)
p1

jpeg(filename=paste(data_dir, "VlnPlot_unfiltered.jpeg", sep = "/"))
plot(p1)
dev.off()


p2 <- ggplot(
  data.frame(retina.scrna@meta.data),
  aes(x = retina.scrna$nCount_RNA, y = retina.scrna$nFeature_RNA)
  ) +
  geom_point() +
  geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
  labs(
    title = "No. of Molecules detected per Gene (unfiltered)",
    x = "No. of Counts",
    y = "No. of Genes"
  )
p2

jpeg(filename=paste(data_dir, "nCount_per_nFeature_unfiltered.jpeg", sep = "/"))
plot(p2)
dev.off()
```

# Filtering

```{r}
lower_lim <- quantile(retina.scrna$nFeature_RNA, 0.1)
upper_lim <- 9000

retina.scrna.filtered <- subset(
  retina.scrna,
  subset = nFeature_RNA > lower_lim & nFeature_RNA < upper_lim & percent.mt < 10
) # & nCount_RNA < 15000
# Why nCount_RNA < 15000 ? What technical reality behind it ?

#retina.scrna.filtered <- subset(retina.scrna, subset = nFeature_RNA > 200 & nFeature_RNA < 6000 & percent.mt < 10, nCount_RNA < 15000)

p3 <- ggplot(
  data.frame(retina.scrna.filtered@meta.data),
  aes(
    x = retina.scrna.filtered$nCount_RNA,
    y = retina.scrna.filtered$nFeature_RNA)
  ) + 
  geom_point() +
  geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +
  labs(
    title = "No. of Molecules detected per Gene (filtered)",
    x = "No. of Counts",
    y = "No. of Genes"
  )
p3

jpeg(filename=paste(data_dir, "nCount_per_nFeature_filtered.jpeg", sep = "/"))
plot(p3)
dev.off()

par(mar = c(4, 8, 2, 1))
C <- retina.scrna.filtered@assays$RNA$counts
C <- Matrix::t(Matrix::t(C)/Matrix::colSums(C)) * 100
most_expressed <- order(apply(C, 1, median), decreasing = T)[20:1]

selected_genes <- t(as.matrix(C[most_expressed, ]))

p4 <- boxplot(
  as.matrix(t(C[most_expressed, ])), 
  cex = 0.1,
  las = 1,
  xlab = "% total count per cell",
  col = (scales::hue_pal())(20)[20:1],
  horizontal = TRUE
)
p4 

#jpeg(filename=paste(data_dir, "Boxplot_topGenes.jpeg", sep = "/"))
#plot(p4)
#dev.off()
```

# Doublet Removal

```{r}
library(scDblFinder)
sce <- as.SingleCellExperiment(retina.scrna.filtered)
dbl.dens <- computeDoubletDensity(sce)
dbl.calls <- doubletThresholding(
  data.frame(score=dbl.dens), 
  method="griffiths", 
  returnType="call"
)
#summary(dbl.calls)

retina.scrna.filtered[["doublets"]] <- dbl.calls
retina.scrna.no_dbl <- subset(
  retina.scrna.filtered, subset = doublets == "singlet")
```

# W-Chromosomal Genes

```{r}
W_genes_list <- c(
  'Aliases','ATP5F1AW','CHD1W','CUPIN1B','ENS-1','HINTW','MBD2','MIR122-2',
  'MIR122B-1','MIR122B-2','MIR7B','NEDD4L','NEDD4L','SKA1','SMAD4','SMAD7B',
  'SPIN1L','ST8SIA3L','UBAP2L2','UBE2R2L','WPG'
)

true_false <- W_genes_list %in% rownames(retina.scrna)

W_genes_list_filt <- W_genes_list[true_false]

retina.scrna.no_dbl[["percent.W"]] <- PercentageFeatureSet(
  retina.scrna.no_dbl, features = W_genes_list_filt)
```

# Cell scoring (does not work)

```{r}
s.genes <- cc.genes$s.genes
g2m.genes <- cc.genes$g2m.genes

true_false <- s.genes %in% rownames(retina.scrna)
s.genes_filt <- s.genes[true_false]

true_false <- g2m.genes %in% rownames(retina.scrna)
g2m.genes_filt <- g2m.genes[true_false]

# normalize first to create 'data' layer
plan("sequential")

retina.scrna.no_dbl <- NormalizeData(
  retina.scrna.no_dbl,
  normalization.method = "LogNormalize",
  scale.factor = 10000
)

retina.scrna.no_dbl <- CellCycleScoring(
  retina.scrna.no_dbl,
  s.features = s.genes_filt,
  g2m.features = g2m.genes_filt,
  set.ident = TRUE
)

retina.scrna.no_dbl$diff_S_G2M <- retina.scrna.no_dbl$S.Score - retina.scrna.no_dbl$G2M.Score
```

# Normalization & Scaling via SCT

```{r}
# save seurat object temporarily because SCT might be unstable
# (delete the file after preprocessing)
#saveRDS(retina.scrna.no_dbl, "../data/retina_preprocessed_tmp.rds")
#retina.scrna.no_dbl <- readRDS("../data/retina_preprocessed_tmp.rds")
```

```{r}
#library(future)
#plan("multisession", workers = 8)
#options(future.globals.maxSize = 8000 * 1024^2)

retina.scrna.no_dbl <- SCTransform(
  retina.scrna.no_dbl,
  vars.to.regress = c("percent.mt", "diff_S_G2M", "percent.W"),
  ncells = 3000,
  conserve.memory = TRUE,
  verbose = TRUE
)

#plan("sequential")
```

# PCA

```{r}
#Run PCA 
retina.scrna.no_dbl <- RunPCA(retina.scrna.no_dbl)
p5 <- ElbowPlot(retina.scrna.no_dbl)
p5
jpeg(filename=paste(data_dir, "ElbowPlot_preprocessing.jpeg", sep = "/"))
plot(p5)
dev.off()
```

# Unsupervised Clustering & Evaluation

```{r}
retina.scrna.no_dbl <- FindNeighbors(retina.scrna.no_dbl, dims=1:15)
retina.scrna.no_dbl <- FindClusters(retina.scrna.no_dbl, resolution = c(0.1, 0.2, 0.5))

p6 <- clustree(retina.scrna.no_dbl, prefix = "SCT_snn_res.")
p6
jpeg(filename=paste(data_dir, "Clustree_preprocessing.jpeg", sep = "/"))
plot(p6)
dev.off()
```

# Dim. Reduction via UMAP

```{r}
retina.scrna.no_dbl <- RunUMAP(retina.scrna.no_dbl, dims = 1:15)
```

```{r}
# change identities to best cluster resolution
Idents(retina.scrna.no_dbl) <- "SCT_snn_res.0.2"
```

```{r}
p7 <- DimPlot(retina.scrna.no_dbl, group.by = "SCT_snn_res.0.2")
p7

jpeg(filename=paste(data_dir, "Unsupervised_clustering1_preprocessing.jpeg", sep = "/"))
plot(p7)
dev.off()
```

```{r}
# visualize clusters expressing a nuclear marker
p8 <- FeaturePlot(
  retina.scrna.no_dbl, 
  reduction = "umap", 
  features = "ASL1",
  label = TRUE
) 
p8
jpeg(filename=paste(data_dir, "Unsupervised_clustering1_ASL1_preprocessing.jpeg", sep = "/"))
plot(p8)
dev.off()

```

# Save Results

```{r}
saveRDS(retina.scrna.no_dbl, "../data/retina.preprocessed.rds")

retina.scrna.no_dbl_ASL1 <- subset(retina.scrna.no_dbl, subset = seurat_clusters == 7)
```

```{r}
# check which cluster it is, since due to some randomness, the number might be
# different
retina.scrna.no_dbl_ASL1 <- subset(retina.scrna.no_dbl, idents = "7")
```

```{r}
saveRDS(retina.scrna.no_dbl_ASL1, "../data/retina.preprocessed_ASL1.rds")
```

